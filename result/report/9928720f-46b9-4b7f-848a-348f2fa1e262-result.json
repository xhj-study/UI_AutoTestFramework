{"name": "用户注册", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoAlertPresentException: Message: no such alert\n  (Session info: chrome=87.0.4280.66)", "trace": "self = <McenterSystem.case.test_RegisterCase.TestRegister object at 0x03D2F6B0>\nsetUp = None\n\n    @allure.title(\"用户注册\")\n    def testRegister(self,setUp):\n        account = createData(\"account{}\")\n>       result = self.reg.userRegister(account,account,\"123456\",\"123456\",\"问题\",\"答案\")\n\n..\\case\\test_RegisterCase.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\service\\RegisterService.py:27: in userRegister\n    return self.reg.getalertText()\n..\\config\\UtilsOperation.py:31: in inner\n    result = func(*args)\n..\\page\\RegisterPage.py:66: in getalertText\n    text = self.base_driver.getAlertText()\n..\\config\\config_box.py:200: in getAlertText\n    alert = self.base_driver.switch_to.alert\nd:\\programinstall\\python_program\\lib\\site-packages\\selenium\\webdriver\\remote\\switch_to.py:55: in alert\n    alert.text\nd:\\programinstall\\python_program\\lib\\site-packages\\selenium\\webdriver\\common\\alert.py:67: in text\n    return self.driver.execute(Command.W3C_GET_ALERT_TEXT)[\"value\"]\nd:\\programinstall\\python_program\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x03D4E2D0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such alert\",\"message\":\"no such alert\\\\n  (Session info: chrome=87.0.42...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x777F74ED+237]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x777F74BD+189]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoAlertPresentException: Message: no such alert\nE         (Session info: chrome=87.0.4280.66)\n\nd:\\programinstall\\python_program\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: NoAlertPresentException"}, "steps": [{"name": "进入注册页面", "status": "passed", "start": 1606548024957, "stop": 1606548026333}, {"name": "输入账号:'account2011281520'", "status": "passed", "parameters": [{"name": "account", "value": "'account2011281520'"}], "start": 1606548028334, "stop": 1606548028491}, {"name": "输入用户名:'account2011281520'", "status": "passed", "parameters": [{"name": "username", "value": "'account2011281520'"}], "start": 1606548030492, "stop": 1606548030635}, {"name": "输入密码:'123456'", "status": "passed", "parameters": [{"name": "password", "value": "'123456'"}], "start": 1606548032636, "stop": 1606548032750}, {"name": "在次输入密码:'123456'", "status": "passed", "parameters": [{"name": "repassword", "value": "'123456'"}], "start": 1606548034751, "stop": 1606548034877}, {"name": "输入安全问题:'问题'", "status": "passed", "parameters": [{"name": "issue", "value": "'问题'"}], "start": 1606548036878, "stop": 1606548036993}, {"name": "输入答案:'答案'", "status": "passed", "parameters": [{"name": "answer", "value": "'答案'"}], "start": 1606548038994, "stop": 1606548039110}, {"name": "点击提交", "status": "passed", "start": 1606548041111, "stop": 1606548041185}, {"name": "获取注册后的弹窗文本", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoAlertPresentException: Message: no such alert\n  (Session info: chrome=87.0.4280.66)\n\n", "trace": "  File \"d:\\programinstall\\python_program\\lib\\site-packages\\allure_commons\\_allure.py\", line 157, in impl\n    return func(*a, **kw)\n  File \"D:\\Python_Script\\McenterSystem\\page\\RegisterPage.py\", line 66, in getalertText\n    text = self.base_driver.getAlertText()\n  File \"D:\\Python_Script\\McenterSystem\\config\\config_box.py\", line 200, in getAlertText\n    alert = self.base_driver.switch_to.alert\n  File \"d:\\programinstall\\python_program\\lib\\site-packages\\selenium\\webdriver\\remote\\switch_to.py\", line 55, in alert\n    alert.text\n  File \"d:\\programinstall\\python_program\\lib\\site-packages\\selenium\\webdriver\\common\\alert.py\", line 67, in text\n    return self.driver.execute(Command.W3C_GET_ALERT_TEXT)[\"value\"]\n  File \"d:\\programinstall\\python_program\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"d:\\programinstall\\python_program\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1606548043186, "stop": 1606548043187}], "attachments": [{"name": "失败截图", "source": "3b37aa23-7212-47e7-9df7-f34f5efd5947-attachment.png", "type": "image/png"}, {"name": "log", "source": "44d82816-fe1b-437e-af88-24604df4653d-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "68ca2441-d427-489b-98d4-d15d009ca6aa-attachment.txt", "type": "text/plain"}], "start": 1606548023956, "stop": 1606548043238, "uuid": "fc3f0100-a4cf-4ea0-82fe-62ea16570988", "historyId": "cbe1df13b1b1a7436a7ae2dc6537e912", "testCaseId": "35bcd3e6b2bb3dde603ddc536947249d", "fullName": "case.test_RegisterCase.TestRegister#testRegister", "labels": [{"name": "parentSuite", "value": "case"}, {"name": "suite", "value": "test_RegisterCase"}, {"name": "subSuite", "value": "TestRegister"}, {"name": "host", "value": "DESKTOP-PALB59L"}, {"name": "thread", "value": "9136-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "case.test_RegisterCase"}]}